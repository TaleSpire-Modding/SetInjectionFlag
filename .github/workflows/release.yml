name: Push to nuget feed on release

on:
  push:
    branches:
      - master
  repository_dispatch:
    types: [regress_update, TaleSpire-Modding-Pipelines/AutomationDlls]

jobs:
  build:
    runs-on: windows-latest
    steps:
      - name: Setup Nuget
        uses: nuget/setup-nuget@v1

      - name: Checkout
        uses: actions/checkout@v2
      
      - shell: pwsh
        id: check_file_changed
        run: |
          # Diff HEAD with the previous commit
          $diff = git diff --name-only HEAD^ HEAD

          # Check if a file under docs/ or with the .md extension has changed (added, modified, deleted)
          $SourceDiff = $diff | Where-Object { $_ -match '^docs/' -or $_ -match '.md$' }
          $HasDiff = $SourceDiff.Length -gt 0

          # Set the output named "docs_changed"
          Write-Host "::set-output name=docs_changed::$HasDiff"
      
      - name: Download artifact (Dispatched)
        if: ${{ github.event.client_payload.branch != null}}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.dll_pat }}
          workflow: build.yml
          branch: ${{ github.event.client_payload.branch }}
          path: .
          repo: TaleSpire-Modding-Pipelines/AutomationDlls
      
      - name: Download artifact (Pushed)
        if: ${{ github.event.client_payload.branch == null}}
        uses: dawidd6/action-download-artifact@v2
        with:
          github_token: ${{ secrets.dll_pat }}
          workflow: build.yml
          branch: master
          path: .
          repo: TaleSpire-Modding-Pipelines/AutomationDlls

      - name: build
        run: |
          cd SetInjectionFlag
          dotnet restore SetInjectionFlag.csproj
          dotnet build SetInjectionFlag.csproj --configuration Release
          
      - name: Upload new artifacts
        uses: actions/upload-artifact@master
        with:
          name: dlls
          path: RadialUIPlugin\bin\Release\RadialUI.dll

  release:
    runs-on: windows-latest
    needs: [ build ]
    if: needs.build.outputs.docs_changed == 'True'
    steps:
    - shell: pwsh
      run: |
        echo publish docs
        dotnet pack SetInjectionFlag.csproj --configuration Release
      # Release package (need to dynamically bind version from COM)
      # dotnet nuget push "bin/Release/OctocatApp.1.0.0.nupkg"  --api-key YOUR_GITHUB_PAT --source "github"
